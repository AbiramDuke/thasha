class Node {
    int data;
    Node prev;
    Node next;

    public Node(int data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}

class DoublyLinkedList {
    Node head;

    // Quicksort on a doubly linked list
    public void quickSort() {
        if (head != null)
            head = quickSortRec(head);
    }

    private Node quickSortRec(Node node) {
        if (node == null || node.next == null)
            return node;

        Node pivot = getLastNode(node);
        Node smallerHead = null, greaterHead = null, equalHead = null;
        Node smallerTail = null, greaterTail = null, equalTail = null;

        Node current = node;
        while (current != null) {
            if (current.data < pivot.data) {
                if (smallerHead == null) {
                    smallerHead = smallerTail = current;
                } else {
                    smallerTail.next = current;
                    current.prev = smallerTail;
                    smallerTail = current;
                }
            } else if (current.data > pivot.data) {
                if (greaterHead == null) {
                    greaterHead = greaterTail = current;
                } else {
                    greaterTail.next = current;
                    current.prev = greaterTail;
                    greaterTail = current;
                }
            } else {
                if (equalHead == null) {
                    equalHead = equalTail = current;
                } else {
                    equalTail.next = current;
                    current.prev = equalTail;
                    equalTail = current;
                }
            }
            current = current.next;
        }

        if (smallerTail != null)
            smallerTail.next = null;
        if (greaterTail != null)
            greaterTail.next = null;
        if (equalTail != null)
            equalTail.next = null;

        Node sortedHead = null, sortedTail = null;

        if (smallerHead != null) {
            smallerHead = quickSortRec(smallerHead);
            sortedHead = smallerHead;
            sortedTail = smallerTail;
        }

        if (equalHead != null) {
            if (sortedHead == null) {
                sortedHead = equalHead;
                sortedTail = equalTail;
            } else {
                sortedTail.next = equalHead;
                equalHead.prev = sortedTail;
                sortedTail = equalTail;
            }
        }

        if (greaterHead != null) {
            greaterHead = quickSortRec(greaterHead);
            if (sortedHead == null) {
                sortedHead = greaterHead;
                sortedTail = greaterTail;
            } else {
                sortedTail.next = greaterHead;
                greaterHead.prev = sortedTail;
                sortedTail = greaterTail;
            }
        }

        return sortedHead;
    }

    private Node getLastNode(Node node) {
        while (node.next != null)
            node = node.next;
        return node;
    }

    // Merge Sort for a doubly linked list
    public void mergeSort() {
        head = mergeSortRec(head);
    }

    private Node mergeSortRec(Node node) {
        if (node == null || node.next == null)
            return node;

        Node mid = getMiddleNode(node);
        Node midNext = mid.next;
        mid.next = null;
        midNext.prev = null;

        Node left = mergeSortRec(node);
        Node right = mergeSortRec(midNext);

        return merge(left, right);
    }

    private Node merge(Node left, Node right) {
        if (left == null)
            return right;
        if (right == null)
           return left;

        Node merged;
        if (left.data <= right.data) {
            merged = left;
            merged.next = merge(left.next, right);
        } else {
            merged = right;
            merged.next = merge(left, right.next);
        }

        merged.next.prev = merged;
        merged.prev = null;

        return merged;
    }

    private Node getMiddleNode(Node node) {
        Node slow = node;
        Node fast = node;

        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        return slow;
    }

    // Find the largest node in the doubly linked list
    public int findLargestNode() {
        if (head == null)
            throw new IllegalStateException("Doubly linked list is empty.");

        int largest = head.data;
        Node current = head.next;

        while (current != null) {
            if (current.data > largest)
                largest = current.data;
            current = current.next;
        }

        return largest;
    }

    // Find the smallest node in the doubly linked list
    public int findSmallestNode() {
        if (head == null)
            throw new IllegalStateException("Doubly linked list is empty.");

        int smallest = head.data;
        Node current = head.next;

        while (current != null) {
            if (current.data < smallest)
                smallest = current.data;
            current = current.next;
        }


        return smallest;
    }

    // Check if a doubly linked list of characters is a palindrome or not
    public boolean isPalindrome() {
        if (head == null || head.next == null)
            return true;

        Node start = head;
        Node end = getLastNode(head);

        while (start != end && start.prev != end) {
            if (start.data != end.data)
                return false;
            start = start.next;
            end = end.prev;
        }

        return true;
    }

    // Rotate the doubly linked list
    public void rotate(int k) {
        if (head == null || k == 0)
            return;

        int count = 1;
        Node current = head;
        while (count < k && current != null) {
            current = current.next;
            count++;
        }

        if (current == null)
            return;

        Node kthNode = current;

        while (current.next != null)
            current = current.next;

        current.next = head;
        head.prev = current;

        head = kthNode.next;
        head.prev = null;

        kthNode.next = null;
    }

    // To find the size of the doubly linked list
    public int getSize() {
        int size = 0;
        Node current = head;

        while (current != null) {
            size++;
            current = current.next;
        }

        return size;
    }

    // Insert values in a sorted way in a sorted doubly linked list
    public void insertSorted(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
            return;
        }

        if (data < head.data) {
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
            return;
        }

        Node current = head;
        while (current.next != null && current.next.data < data)
            current = current.next;

        newNode.next = current.next;
        if (current.next != null)
            current.next.prev = newNode;

        current.next = newNode;
        newNode.prev = current;
    }

    // Remove duplicates from a sorted, doubly linked list
    public void removeDuplicates() {
        Node current =head;

        while (current != null && current.next != null) {
            if (current.data == current.next.data) {
                Node nextNext = current.next.next;
                current.next = nextNext;
                if (nextNext != null)
                    nextNext.prev = current;
            } else {
                current = current.next;
            }
        }
    }

    // Print the doubly linked list
    public void printList() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}

public class DoublyLinkedListExample {
    public static void main(String[] args) {
        DoublyLinkedList dll = new DoublyLinkedList();
        dll.insertSorted(5);
        dll.insertSorted(3);
        dll.insertSorted(8);
        dll.insertSorted(2);
        dll.insertSorted(5);

        System.out.println("Original List:");
        dll.printList();

        dll.quickSort();
        System.out.println("List after Quicksort:");
        dll.printList();

        dll.mergeSort();
        System.out.println("List after Merge Sort:");
        dll.printList();

        int largestNode = dll.findLargestNode();
        System.out.println("Largest Node: " + largestNode);

        int smallestNode = dll.findSmallestNode();
        System.out.println("Smallest Node: " + smallestNode);

        boolean isPalindrome = dll.isPalindrome();
        System.out.println("Is Palindrome: " + isPalindrome);

        dll.rotate(2);
        System.out.println("List after Rotation:");
        dll.printList();

        int size = dll.getSize();
        System.out.println("Size of List: " + size);

        dll.insertSorted(4);
        System.out.println("List after Insertion:");
        dll.printList();

        dll.removeDuplicates();
        System.out.println("List after Removing Duplicates:");
        dll.printList();
    }
}
